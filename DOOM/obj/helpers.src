; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\HELPERS.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <graphx.h>
;   10	#include <debug.h>
;   11	#include <keypadc.h>
;   12	#include <assert.h>
;   13	#include <compression.h>
;   14	#include "helpers.h"
;   15	int root(int x)
;   16	{
_root:
	LD	HL,-6
	CALL	__frameset
;   17		
;   18		 int a,b;
;   19		b = x;
	LD	BC,(IX+6)
	LD	(IX+-6),BC
;   20		a = x = 0x3f;
;   21		x = b/x;
	LD	HL,BC
	LD	BC,63
	CALL	__idivs
	LD	(IX+6),HL
;   22		a = x = (x+a)>>1;
	LD	IY,(IX+6)
	LEA	HL,IY+63
	LD	A,1
	CALL	__ishrs_b
	LD	BC,HL
	LD	(IX+6),BC
	LD	DE,(IX+6)
	LD	(IX+-3),DE
;   23		x = b/x;
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	(IX+6),HL
;   24		a = x = (x+a)>>1;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,1
	CALL	__ishrs_b
	LD	BC,HL
	LD	(IX+6),BC
	LD	DE,(IX+6)
	LD	(IX+-3),DE
;   25		x = b/x;
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	(IX+6),HL
;   26		x = (x+a)>>1;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,1
	CALL	__ishrs_b
	LD	(IX+6),HL
;   27		return(x); 
;   28		
;   29	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _root ***************************
;Name                         Addr/Register   Size   Type
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;x                                     IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   30	void rotateVector(float * vector, float angle)
;   31	{
_rotateVector:
	LD	HL,-28
	CALL	__frameset
;   32		float oldX,oldY;
;   33		//oldX =(vector[0] *cos(angle)) - (vector[1] * sin(angle));
;   34		//oldY = (vector[0] * sin(angle)) + (vector[1] *cos(angle));
;   35		oldX =(vector[0] *fastCos(angle)) - (vector[1] * fastSin(angle));
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-28),IY
	CALL	_fastCos
	LD	IY,(IX+-28)
	POP	BC
	POP	BC
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	(IX+-21),BC
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-22),A
	LEA	HL,IY+4
	LD	(IX+-25),HL	; spill
	CALL	_fastSin
	POP	BC
	POP	BC
	LD	(IX+-15),HL	; spill
	LD	IY,(IX+-25)
	LD	HL,(IX+-15)	; unspill
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-21)
	LD	A,(IX+-22)
	CALL	__fsub
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   36		oldY = (vector[0] * fastSin(angle)) + (vector[1] *fastCos(angle));
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-28),IY
	CALL	_fastSin
	LD	IY,(IX+-28)
	POP	BC
	POP	BC
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	(IX+-11),BC
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-12),A
	LEA	HL,IY+4
	LD	(IX+-18),HL	; spill
	CALL	_fastCos
	POP	BC
	POP	BC
	LD	(IX+-15),HL	; spill
	LD	IY,(IX+-18)
	LD	HL,(IX+-15)	; unspill
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-11)
	LD	A,(IX+-12)
	CALL	__fadd
	LD	(IX+-8),BC
	LD	(IX+-5),A
;   37		vector[0] = oldX;
	LD	HL,(IX+6)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
;   38		vector[1] = oldY;
	LD	IY,(IX+6)
	LEA	HL,IY+4
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
;   39	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _rotateVector ***************************
;Name                         Addr/Register   Size   Type
;_fastSin                            IMPORT  -----   function
;_fastCos                            IMPORT  -----   function
;oldY                                  IX-8      4   variable
;oldX                                  IX-4      4   variable
;angle                                 IX+9      4   parameter
;vector                                IX+6      3   parameter


; Stack Frame Size: 43 (bytes)
;       Spill Code: -2 (instruction)


;   40	void normalizeVector(float * vector)
;   41	{
_normalizeVector:
	LD	HL,-14
	CALL	__frameset
;   42		float dist = sqrt((vector[0] * vector[0]) + (vector[1]	* vector[1]));	
	LD	IY,(IX+6)
	LEA	BC,IY+4
	LD	(IX+-6),BC
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	IY,(IX+-6)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	(IX+-14),BC
	LD	(IX+-11),A
	LD	A,(IY+3)
	LD	BC,(IY)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-14)
	LD	A,(IX+-11)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_sqrt
	POP	BC
	POP	BC
	LD	(IX+-10),HL
	LD	(IX+-7),E
;   43		vector[0] = vector[0] / dist;
	LD	IY,(IX+6)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	CALL	__fdiv
	LD	(IY),BC
	LD	(IY+3),A
;   44		vector[1] = vector[1] /dist;
	LEA	BC,IY+4
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	CALL	__fdiv
	LD	(IY),BC
	LD	(IY+3),A
;   45	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _normalizeVector ***************************
;Name                         Addr/Register   Size   Type
;_sqrt                               IMPORT  -----   function
;dist                                 IX-10      4   variable
;vector                                IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: -2 (instruction)


;   46	
;   47	float distanceBetween(float * vec1, float * vec2)
;   48	 {
_distanceBetween:
	LD	HL,-26
	CALL	__frameset
;   49		//return  lookupSqrt( (vec1[0] - vec2[0]) * (vec1[0] - vec2[0]) + (vec1[1] - vec2[1]) * (vec1[1] - vec2[1]) );
;   50		return  sqrt( (vec1[0] - vec2[0]) * (vec1[0] - vec2[0]) + (vec1[1] - vec2[1]) * (vec1[1] - vec2[1]) );
	LD	IY,(IX+9)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+6)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	(IX+-16),HL	; spill
	LEA	HL,IY+4
	LD	(IX+-22),HL	; spill
	LD	HL,(IX+-16)	; unspill
	LD	(IX+-16),HL	; spill
	LD	HL,(IX+-22)	; unspill
	LD	(IX+-6),HL
	LD	HL,(IX+-16)	; unspill
	LD	IY,(IX+9)
	LD	(IX+-16),HL	; spill
	LEA	HL,IY+4
	LD	(IX+-19),HL	; spill
	LD	HL,(IX+-16)	; unspill
	LD	(IX+-16),HL	; spill
	LD	HL,(IX+-19)	; unspill
	LD	(IX+-3),HL
	LD	HL,(IX+-16)	; unspill
	LD	IY,(IX+-3)
	CALL	__fsub
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+-6)
	LD	(IX+-13),BC
	LD	D,A
	LD	A,(IY+3)
	LD	BC,(IY)
	CALL	__fsub
	LD	(IX+-10),BC
	LD	(IX+-7),A
	LD	A,D
	LD	BC,(IX+-13)
	LD	E,D
	LD	HL,(IX+-13)
	CALL	__fmul
	LD	(IX+-25),BC
	LD	(IX+-26),A
	LD	A,(IX+-7)
	LD	BC,(IX+-10)
	LD	E,(IX+-7)
	LD	HL,(IX+-10)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-25)
	LD	A,(IX+-26)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_sqrt
	POP	BC
	POP	BC
;   51		
;   52	 }
	LD	SP,IX
	POP	IX
	RET	


;**************************** _distanceBetween ***************************
;Name                         Addr/Register   Size   Type
;_sqrt                               IMPORT  -----   function
;vec2                                  IX+9      3   parameter
;vec1                                  IX+6      3   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: -2 (instruction)


;   53	 float fastCos(float x)
;   54	 {
_fastCos:
	LD	HL,-8
	CALL	__frameset
;   55		 float cos = 0;
;   56		 while ( x < -3.14159265 )
	JR	L_4
L_5:
;   57		 {
;   58			  x += 6.28318531;
	LD	HL,13176795
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;   59		 }
L_4:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,4788187
	LD	A,192
	CALL	__fcmp
	JP	M,L_5
;   60		 while (x > 3.14159265)
	JR	L_6
L_7:
;   61		 {
;   62			  x -= 6.28318531;
	LD	HL,13176795
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;   63		 }
L_6:
	LD	HL,4788187
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_7
;   64		 
;   65		 x += 1.57079632;
	LD	HL,13176795
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;   66		if (x >  3.14159265)
	LD	HL,4788187
	LD	E,64
	CALL	__fcmp
	JP	P,L_17
;   67		{
;   68			x -= 6.28318531;
	LD	HL,13176795
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;   69		}
L_17:
;   70		if (x < 0)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_16
;   71		{
;   72	    cos = 1.27323954 * x + 0.405284735 * x * x;
	LD	HL,13599099
	LD	E,62
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	HL,10680707
	LD	E,63
	CALL	__fadd
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   73	    
;   74	    if (cos < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_12
;   75	        cos = .225 * (cos *-cos - cos) + cos;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   76	    else
	JR	L_18
L_12:
;   77	        cos = .225 * (cos * cos - cos) + cos;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   78		}
;   79		else
	JR	L_18
L_16:
;   80		{
;   81	    cos = 1.27323954 * x - 0.405284735 * x * x;
	LD	HL,10680707
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-8),BC
	LD	(IX+-5),A
	LD	A,(IX+9)
	LD	BC,(IX+6)
	LD	HL,13599099
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__fsub
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   82	
;   83	    if (cos < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_14
;   84	        cos = .225 * (cos *-cos - cos) + cos;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   85	    else
	JR	L_18
L_14:
;   86	        cos = .225 * (cos * cos - cos) + cos;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   87		}
L_18:
;   88		return cos;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;   89	 }
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastCos ***************************
;Name                         Addr/Register   Size   Type
;cos                                   IX-4      4   variable
;x                                     IX+6      4   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: -2 (instruction)


;   90	 float fastSin(float x)
;   91	 {
_fastSin:
	LD	HL,-8
	CALL	__frameset
;   92		 float sin = 0;
;   93		 while ( x < -3.14159265 )
	JR	L_20
L_21:
;   94		 {
;   95			  x += 6.28318531;
	LD	HL,13176795
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;   96		 }
L_20:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,4788187
	LD	A,192
	CALL	__fcmp
	JP	M,L_21
;   97		 while (x > 3.14159265)
	JR	L_22
L_23:
;   98		 {
;   99			  x -= 6.28318531;
	LD	HL,13176795
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;  100		 }
L_22:
	LD	HL,4788187
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_23
;  101		  
;  102		if (x < 0)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_30
;  103		{
;  104	    sin = 1.27323954 * x + .405284735 * x * x;
	LD	HL,13599099
	LD	E,62
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	HL,10680707
	LD	E,63
	CALL	__fadd
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  105	    
;  106	    if (sin < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_26
;  107	        sin = .225 * (sin *-sin - sin) + sin;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  108	    else
	JR	L_32
L_26:
;  109	        sin = .225 * (sin * sin - sin) + sin;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  110		}
;  111		else
	JR	L_32
L_30:
;  112		{
;  113	    sin = 1.27323954 * x - 0.405284735 * x * x;
	LD	HL,10680707
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-8),BC
	LD	(IX+-5),A
	LD	A,(IX+9)
	LD	BC,(IX+6)
	LD	HL,13599099
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__fsub
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  114	    
;  115	    if (sin < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_28
;  116	        sin = .225 * (sin *-sin - sin) + sin;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  117	    else
	JR	L_32
L_28:
;  118	        sin = .225 * (sin * sin - sin) + sin;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  119		}
L_32:
;  120		return sin;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;  121	 }
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastSin ***************************
;Name                         Addr/Register   Size   Type
;sin                                   IX-4      4   variable
;x                                     IX+6      4   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: -2 (instruction)


;  122	 float fastSqrt( float n )
;  123	{
_fastSqrt:
	LD	HL,-7
	CALL	__frameset
;  124		// double a = (eventually the main method will plug values into a)
;  125		//double a = (double) n;
;  126		int i;
;  127		float a =n;
;  128		float x = 1;
	LD	BC,8388608
	LD	(IX+-7),BC
	LD	A,63
	LD	(IX+-4),A
;  129	 
;  130		// For loop to get the square root value of the entered number.
;  131		for(  i = 0; i < n; i++)
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_37
L_35:
;  132		{
;  133			x = 0.5 * ( x+a / x );
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	CALL	__fadd
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fmul
	LD	(IX+-7),BC
	LD	(IX+-4),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  134		}
L_37:
	LD	BC,(IX+-3)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_35
;  135	 
;  136		return x;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
;  137	} 
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastSqrt ***************************
;Name                         Addr/Register   Size   Type
;x                                     IX-7      4   variable
;i                                     IX-3      3   variable
;n                                     IX+6      4   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: -2 (instruction)


;  138	float fastACos(float x)
;  139	{
_fastACos:
	CALL	__frameset0
;  140		return (-0.69813170079773 * x * x - 0.87266462599716) * x + 1.5707963267948;
	LD	HL,3324098
	LD	E,191
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	HL,6252275
	LD	E,63
	CALL	__fsub
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	HL,13176795
	LD	E,63
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;  141	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastACos ***************************
;Name                         Addr/Register   Size   Type
;x                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -2 (instruction)


;  142	float floatAbs(float x)
;  143	{
_floatAbs:
	CALL	__frameset0
;  144		if (x<0)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_42
;  145		{
;  146			return -x;
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fneg
	LD	E,A
	LD	HL,BC
	JR	L_43
;  147		}
L_42:
;  148		return x;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  149	}
L_43:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _floatAbs ***************************
;Name                         Addr/Register   Size   Type
;x                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -2 (instruction)


;  150	float max(float x, float y)
;  151	{
_max:
	CALL	__frameset0
;  152		if (x>y)
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	P,L_45
;  153		{
;  154			return x;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	JR	L_46
;  155		}
L_45:
;  156		return y;
	LD	HL,(IX+12)
	LD	E,(IX+15)
;  157	}
L_46:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _max ***************************
;Name                         Addr/Register   Size   Type
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -2 (instruction)


;  158	float min(float x, float y)
;  159	{
_min:
	CALL	__frameset0
;  160		if (x<y)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+12)
	LD	A,(IX+15)
	CALL	__fcmp
	JP	P,L_48
;  161		{
;  162			return x;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	JR	L_49
;  163		}
L_48:
;  164		return y;
	LD	HL,(IX+12)
	LD	E,(IX+15)
L_49:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _min ***************************
;Name                         Addr/Register   Size   Type
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -2 (instruction)


	XREF _sqrt:ROM
	XREF __idivs:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fneg:ROM
	XREF __fcmp:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __ishrs_b:ROM
	XDEF _min
	XDEF _max
	XDEF _floatAbs
	XDEF _fastACos
	XDEF _fastSqrt
	XDEF _fastSin
	XDEF _fastCos
	XDEF _distanceBetween
	XDEF _normalizeVector
	XDEF _rotateVector
	XDEF _root
	END
