; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\HELPERS.C"
	.assume ADL=1
	SEGMENT CODE
;    1	/*
;    2	-----helpers.c-----
;    3	Declaration of helper functions such as
;    4	integer square root, vector rotation and normalization,
;    5	and fast trig functions.
;    6	*/
;    7	#include <stdbool.h>
;    8	#include <stddef.h>
;    9	#include <stdint.h>
;   10	#include <tice.h>
;   11	#include <math.h>
;   12	#include <stdio.h>
;   13	#include <stdlib.h>
;   14	#include <string.h>
;   15	#include <graphx.h>
;   16	#include <debug.h>
;   17	#include <keypadc.h>
;   18	#include <assert.h>
;   19	#include <compression.h>
;   20	#include "helpers.h"
;   21	int root(int x)
;   22	{
_root:
	LD	HL,-6
	CALL	__frameset
;   23		
;   24		 int a,b;
;   25		b = x;
	LD	BC,(IX+6)
	LD	(IX+-6),BC
;   26		a = x = 0x3f;
;   27		x = b/x;
	LD	HL,BC
	LD	BC,63
	CALL	__idivs
	LD	(IX+6),HL
;   28		a = x = (x+a)>>1;
	LD	IY,(IX+6)
	LEA	HL,IY+63
	LD	A,1
	CALL	__ishrs_b
	LD	BC,HL
	LD	(IX+6),BC
	LD	DE,(IX+6)
	LD	(IX+-3),DE
;   29		x = b/x;
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	(IX+6),HL
;   30		a = x = (x+a)>>1;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,1
	CALL	__ishrs_b
	LD	BC,HL
	LD	(IX+6),BC
	LD	DE,(IX+6)
	LD	(IX+-3),DE
;   31		x = b/x;
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	(IX+6),HL
;   32		x = (x+a)>>1;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,1
	CALL	__ishrs_b
	LD	(IX+6),HL
;   33		return(x); 
;   34		
;   35	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _root ***************************
;Name                         Addr/Register   Size   Type
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;x                                     IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   36	void rotateVector(float * vector, float angle)
;   37	{
_rotateVector:
	LD	HL,-28
	CALL	__frameset
;   38		float oldX,oldY;
;   39		//oldX =(vector[0] *cos(angle)) - (vector[1] * sin(angle));
;   40		//oldY = (vector[0] * sin(angle)) + (vector[1] *cos(angle));
;   41		oldX =(vector[0] *fastCos(angle)) - (vector[1] * fastSin(angle));
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-28),IY
	CALL	_fastCos
	LD	IY,(IX+-28)
	POP	BC
	POP	BC
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	(IX+-21),BC
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-22),A
	LEA	HL,IY+4
	LD	(IX+-25),HL	; spill
	CALL	_fastSin
	POP	BC
	POP	BC
	LD	(IX+-15),HL	; spill
	LD	IY,(IX+-25)
	LD	HL,(IX+-15)	; unspill
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-21)
	LD	A,(IX+-22)
	CALL	__fsub
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   42		oldY = (vector[0] * fastSin(angle)) + (vector[1] *fastCos(angle));
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-28),IY
	CALL	_fastSin
	LD	IY,(IX+-28)
	POP	BC
	POP	BC
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	(IX+-11),BC
	LD	C,(IX+12)
	LD	B,0
	LD	IY,(IX+6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	(IX+-12),A
	LEA	HL,IY+4
	LD	(IX+-18),HL	; spill
	CALL	_fastCos
	POP	BC
	POP	BC
	LD	(IX+-15),HL	; spill
	LD	IY,(IX+-18)
	LD	HL,(IX+-15)	; unspill
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-11)
	LD	A,(IX+-12)
	CALL	__fadd
	LD	(IX+-8),BC
	LD	(IX+-5),A
;   43		vector[0] = oldX;
	LD	HL,(IX+6)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
;   44		vector[1] = oldY;
	LD	IY,(IX+6)
	LEA	HL,IY+4
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
;   45	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _rotateVector ***************************
;Name                         Addr/Register   Size   Type
;_fastSin                            IMPORT  -----   function
;_fastCos                            IMPORT  -----   function
;oldY                                  IX-8      4   variable
;oldX                                  IX-4      4   variable
;angle                                 IX+9      4   parameter
;vector                                IX+6      3   parameter


; Stack Frame Size: 43 (bytes)
;       Spill Code: -2 (instruction)


;   46	void normalizeVector(float * vector)
;   47	{
_normalizeVector:
	LD	HL,-14
	CALL	__frameset
;   48		float dist = sqrt((vector[0] * vector[0]) + (vector[1]	* vector[1]));	
	LD	IY,(IX+6)
	LEA	BC,IY+4
	LD	(IX+-6),BC
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fmul
	LD	IY,(IX+-6)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	(IX+-14),BC
	LD	(IX+-11),A
	LD	A,(IY+3)
	LD	BC,(IY)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-14)
	LD	A,(IX+-11)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_sqrt
	POP	BC
	POP	BC
	LD	(IX+-10),HL
	LD	(IX+-7),E
;   49		vector[0] = vector[0] / dist;
	LD	IY,(IX+6)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	CALL	__fdiv
	LD	(IY),BC
	LD	(IY+3),A
;   50		vector[1] = vector[1] /dist;
	LEA	BC,IY+4
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	CALL	__fdiv
	LD	(IY),BC
	LD	(IY+3),A
;   51	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _normalizeVector ***************************
;Name                         Addr/Register   Size   Type
;_sqrt                               IMPORT  -----   function
;dist                                 IX-10      4   variable
;vector                                IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: -2 (instruction)


;   52	
;   53	float distanceBetween(float * vec1, float * vec2)
;   54	 {
_distanceBetween:
	LD	HL,-26
	CALL	__frameset
;   55		//return  lookupSqrt( (vec1[0] - vec2[0]) * (vec1[0] - vec2[0]) + (vec1[1] - vec2[1]) * (vec1[1] - vec2[1]) );
;   56		return  sqrt( (vec1[0] - vec2[0]) * (vec1[0] - vec2[0]) + (vec1[1] - vec2[1]) * (vec1[1] - vec2[1]) );
	LD	IY,(IX+9)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+6)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	(IX+-16),HL	; spill
	LEA	HL,IY+4
	LD	(IX+-22),HL	; spill
	LD	HL,(IX+-16)	; unspill
	LD	(IX+-16),HL	; spill
	LD	HL,(IX+-22)	; unspill
	LD	(IX+-6),HL
	LD	HL,(IX+-16)	; unspill
	LD	IY,(IX+9)
	LD	(IX+-16),HL	; spill
	LEA	HL,IY+4
	LD	(IX+-19),HL	; spill
	LD	HL,(IX+-16)	; unspill
	LD	(IX+-16),HL	; spill
	LD	HL,(IX+-19)	; unspill
	LD	(IX+-3),HL
	LD	HL,(IX+-16)	; unspill
	LD	IY,(IX+-3)
	CALL	__fsub
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+-6)
	LD	(IX+-13),BC
	LD	D,A
	LD	A,(IY+3)
	LD	BC,(IY)
	CALL	__fsub
	LD	(IX+-10),BC
	LD	(IX+-7),A
	LD	A,D
	LD	BC,(IX+-13)
	LD	E,D
	LD	HL,(IX+-13)
	CALL	__fmul
	LD	(IX+-25),BC
	LD	(IX+-26),A
	LD	A,(IX+-7)
	LD	BC,(IX+-10)
	LD	E,(IX+-7)
	LD	HL,(IX+-10)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-25)
	LD	A,(IX+-26)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_sqrt
	POP	BC
	POP	BC
;   57		
;   58	 }
	LD	SP,IX
	POP	IX
	RET	


;**************************** _distanceBetween ***************************
;Name                         Addr/Register   Size   Type
;_sqrt                               IMPORT  -----   function
;vec2                                  IX+9      3   parameter
;vec1                                  IX+6      3   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: -2 (instruction)


;   59	 float fastCos(float x)
;   60	 {
_fastCos:
	LD	HL,-8
	CALL	__frameset
;   61		 float cos = 0;
;   62		 while ( x < -3.14159265 )
	JR	L_4
L_5:
;   63		 {
;   64			  x += 6.28318531;
	LD	HL,13176795
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;   65		 }
L_4:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,4788187
	LD	A,192
	CALL	__fcmp
	JP	M,L_5
;   66		 while (x > 3.14159265)
	JR	L_6
L_7:
;   67		 {
;   68			  x -= 6.28318531;
	LD	HL,13176795
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;   69		 }
L_6:
	LD	HL,4788187
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_7
;   70		 
;   71		 x += 1.57079632;
	LD	HL,13176795
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;   72		if (x >  3.14159265)
	LD	HL,4788187
	LD	E,64
	CALL	__fcmp
	JP	P,L_17
;   73		{
;   74			x -= 6.28318531;
	LD	HL,13176795
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;   75		}
L_17:
;   76		if (x < 0)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_16
;   77		{
;   78	    cos = 1.27323954 * x + 0.405284735 * x * x;
	LD	HL,13599099
	LD	E,62
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	HL,10680707
	LD	E,63
	CALL	__fadd
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   79	    
;   80	    if (cos < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_12
;   81	        cos = .225 * (cos *-cos - cos) + cos;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   82	    else
	JR	L_18
L_12:
;   83	        cos = .225 * (cos * cos - cos) + cos;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   84		}
;   85		else
	JR	L_18
L_16:
;   86		{
;   87	    cos = 1.27323954 * x - 0.405284735 * x * x;
	LD	HL,10680707
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-8),BC
	LD	(IX+-5),A
	LD	A,(IX+9)
	LD	BC,(IX+6)
	LD	HL,13599099
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__fsub
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   88	
;   89	    if (cos < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_14
;   90	        cos = .225 * (cos *-cos - cos) + cos;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   91	    else
	JR	L_18
L_14:
;   92	        cos = .225 * (cos * cos - cos) + cos;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   93		}
L_18:
;   94		return cos;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;   95	 }
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastCos ***************************
;Name                         Addr/Register   Size   Type
;cos                                   IX-4      4   variable
;x                                     IX+6      4   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: -2 (instruction)


;   96	 float fastSin(float x)
;   97	 {
_fastSin:
	LD	HL,-8
	CALL	__frameset
;   98		 float sin = 0;
;   99		 while ( x < -3.14159265 )
	JR	L_20
L_21:
;  100		 {
;  101			  x += 6.28318531;
	LD	HL,13176795
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;  102		 }
L_20:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,4788187
	LD	A,192
	CALL	__fcmp
	JP	M,L_21
;  103		 while (x > 3.14159265)
	JR	L_22
L_23:
;  104		 {
;  105			  x -= 6.28318531;
	LD	HL,13176795
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;  106		 }
L_22:
	LD	HL,4788187
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_23
;  107		  
;  108		if (x < 0)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_30
;  109		{
;  110	    sin = 1.27323954 * x + .405284735 * x * x;
	LD	HL,13599099
	LD	E,62
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	HL,10680707
	LD	E,63
	CALL	__fadd
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  111	    
;  112	    if (sin < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_26
;  113	        sin = .225 * (sin *-sin - sin) + sin;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  114	    else
	JR	L_32
L_26:
;  115	        sin = .225 * (sin * sin - sin) + sin;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  116		}
;  117		else
	JR	L_32
L_30:
;  118		{
;  119	    sin = 1.27323954 * x - 0.405284735 * x * x;
	LD	HL,10680707
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-8),BC
	LD	(IX+-5),A
	LD	A,(IX+9)
	LD	BC,(IX+6)
	LD	HL,13599099
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__fsub
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  120	    
;  121	    if (sin < 0)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+-1)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_28
;  122	        sin = .225 * (sin *-sin - sin) + sin;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fneg
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  123	    else
	JR	L_32
L_28:
;  124	        sin = .225 * (sin * sin - sin) + sin;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fsub
	LD	HL,6710886
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  125		}
L_32:
;  126		return sin;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;  127	 }
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastSin ***************************
;Name                         Addr/Register   Size   Type
;sin                                   IX-4      4   variable
;x                                     IX+6      4   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: -2 (instruction)


;  128	 float fastSqrt( float n )
;  129	{
_fastSqrt:
	LD	HL,-7
	CALL	__frameset
;  130		// double a = (eventually the main method will plug values into a)
;  131		//double a = (double) n;
;  132		int i;
;  133		float a =n;
;  134		float x = 1;
	LD	BC,8388608
	LD	(IX+-7),BC
	LD	A,63
	LD	(IX+-4),A
;  135	 
;  136		// For loop to get the square root value of the entered number.
;  137		for(  i = 0; i < n; i++)
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_37
L_35:
;  138		{
;  139			x = 0.5 * ( x+a / x );
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	CALL	__fadd
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fmul
	LD	(IX+-7),BC
	LD	(IX+-4),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  140		}
L_37:
	LD	BC,(IX+-3)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_35
;  141	 
;  142		return x;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
;  143	} 
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastSqrt ***************************
;Name                         Addr/Register   Size   Type
;x                                     IX-7      4   variable
;i                                     IX-3      3   variable
;n                                     IX+6      4   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: -2 (instruction)


;  144	float fastACos(float x)
;  145	{
_fastACos:
	CALL	__frameset0
;  146		return (-0.69813170079773 * x * x - 0.87266462599716) * x + 1.5707963267948;
	LD	HL,3324098
	LD	E,191
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	HL,6252275
	LD	E,63
	CALL	__fsub
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	HL,13176795
	LD	E,63
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;  147	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fastACos ***************************
;Name                         Addr/Register   Size   Type
;x                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -2 (instruction)


;  148	float floatAbs(float x)
;  149	{
_floatAbs:
	CALL	__frameset0
;  150		if (x<0)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_42
;  151		{
;  152			return -x;
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fneg
	LD	E,A
	LD	HL,BC
	JR	L_43
;  153		}
L_42:
;  154		return x;
	LD	HL,(IX+6)
	LD	E,(IX+9)
;  155	}
L_43:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _floatAbs ***************************
;Name                         Addr/Register   Size   Type
;x                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -2 (instruction)


;  156	float max(float x, float y)
;  157	{
_max:
	CALL	__frameset0
;  158		if (x>y)
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	P,L_45
;  159		{
;  160			return x;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	JR	L_46
;  161		}
L_45:
;  162		return y;
	LD	HL,(IX+12)
	LD	E,(IX+15)
;  163	}
L_46:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _max ***************************
;Name                         Addr/Register   Size   Type
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -2 (instruction)


;  164	float min(float x, float y)
;  165	{
_min:
	CALL	__frameset0
;  166		if (x<y)
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+12)
	LD	A,(IX+15)
	CALL	__fcmp
	JP	P,L_48
;  167		{
;  168			return x;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	JR	L_49
;  169		}
L_48:
;  170		return y;
	LD	HL,(IX+12)
	LD	E,(IX+15)
;  171	}
L_49:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _min ***************************
;Name                         Addr/Register   Size   Type
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -2 (instruction)


;  172	
;  173	
;  174	void printText(const char *text, uint8_t xpos, uint8_t ypos) {
_printText:
	CALL	__frameset0
;  175	    os_SetCursorPos(ypos, xpos);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  176	    os_PutStrFull(text);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  177	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -2 (instruction)


;  178	
;  179	// Draw small text at the given X/Y location 
;  180	void printTextSmall(const char *text, uint8_t xpos, uint8_t ypos) {
_printTextSmall:
	CALL	__frameset0
;  181	    os_FontSelect(0); // sets small font (1 == big, see docs)
	LD	BC,0
	PUSH	BC
	CALL	_os_FontSelect
	POP	BC
;  182	    os_FontDrawText(text, xpos, ypos);
	LD	C,(IX+12)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_FontDrawText
	POP	BC
	POP	BC
	POP	BC
;  183	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printTextSmall ***************************
;Name                         Addr/Register   Size   Type
;_os_FontDrawText                    IMPORT  -----   function
;_os_FontSelect                      IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -2 (instruction)


;  184	
;  185	
;  186	
;  187	//copied from online, changes a float into a string
;  188	#include <stdio.h>
;  189	#define PSH(X) (*(buf++)=(X))
;  190	#define PSH1(X) (*(buf--)=(X))
;  191	#define PEEK() buf[-1]
;  192	#define POP() *(--buf) = '\0'
;  193	#define PLUS 1
;  194	#define SPACE 2
;  195	char * gcvt(double f, size_t ndigit, char * buf)
;  196	{
_gcvt:
	LD	HL,-44
	CALL	__frameset
;  197	  int i;
;  198		unsigned long z,k;
;  199	  int exp = 0;
;  200	  char *c = buf;
	LD	BC,(IX+15)
	LD	(IX+-14),BC
;  201	  double f2,t,scal;
;  202	  int   sign = 0;
	LD	BC,0
	LD	(IX+-21),BC
;  203	
;  204	  if((int)ndigit == -1)
	LD	HL,(IX+12)
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_54
;  205	    ndigit = 5;
	LD	BC,5
	LD	(IX+12),BC
L_54:
;  206	
;  207	  /* Unsigned long long only allows for 20 digits of precision
;  208	   * which is already more than double supports, so we limit the
;  209	   * digits to this.  long double might require an increase if it is ever
;  210	   * implemented.
;  211	   */
;  212	  if (ndigit > 20)
	LD	BC,(IX+12)
	LD	HL,20
	OR	A,A
	SBC	HL,BC
	JR	NC,L_57
;  213		  ndigit = 20;
	LD	BC,20
	LD	(IX+12),BC
L_57:
;  214	  
;  215	  if (f < 0.0) {
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_58
;  216	    sign = 1;
	LD	BC,1
	LD	(IX+-21),BC
;  217	    f = -f;
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fneg
	LD	(IX+6),BC
	LD	(IX+9),A
;  218		 buf++;
	LD	BC,(IX+15)
	INC	BC
	LD	(IX+15),BC
;  219	  }
L_58:
;  220	
;  221	  scal = 1;
	LD	BC,8388608
	LD	(IX+-11),BC
	LD	A,63
	LD	(IX+-8),A
;  222	  for (i=ndigit; i>0; i--)
	LD	BC,(IX+12)
	LD	(IX+-3),BC
	JR	L_62
L_60:
;  223		  scal *= 10;
	LD	HL,2097152
	LD	E,65
	LD	BC,(IX+-11)
	LD	A,(IX+-8)
	CALL	__fmul
	LD	(IX+-11),BC
	LD	(IX+-8),A
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
L_62:
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_60
;  224	  k = f + 0.1 / scal;
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	LD	BC,13421773
	LD	A,61
	CALL	__fdiv
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  225	  f2 = f - k;
	CALL	__ultof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+-29),BC
	LD	(IX+-26),A
;  226	  if (!f) {
	LD	HL,(IX+6)
	LD	E,(IX+9)
	XOR	A,A
	LD	BC,0
	CALL	__fcmp
	JR	NZ,L_76
;  227	    PSH('0');
	LD	HL,(IX+15)
	LD	(HL),48
	LD	BC,(IX+15)
	INC	BC
	LD	(IX+15),BC
;  228	    if(ndigit > 0)
	LD	BC,(IX+12)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	JR	NC,L_72
;  229	      PSH('.');
	LD	HL,(IX+15)
	LD	(HL),46
	LD	BC,(IX+15)
	INC	BC
	LD	(IX+15),BC
L_72:
;  230	    for (i=0;i<ndigit;i++)
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_71
L_69:
;  231	      PSH('0');
	LD	BC,(IX+15)
	LD	(IX+-32),BC
	LD	HL,BC
	LD	(HL),48
	LD	BC,(IX+15)
	INC	BC
	LD	(IX+15),BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_71:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_69
;  232	  	   PSH(0);
	LD	BC,(IX+15)
	LD	(IX+-35),BC
	LD	HL,BC
	LD	(HL),0
;  233	  	 return c;
	LD	HL,(IX+-14)
	JR	L_100
;  234	  }
L_76:
;  235	
;  236	  i = 1;
	LD	BC,1
	LD	(IX+-3),BC
;  237	  while (f >= 10.0) {
	JR	L_78
L_79:
;  238	  	f /= 10.0;
	LD	HL,2097152
	LD	E,65
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	(IX+6),BC
	LD	(IX+9),A
;  239	  	i++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  240	  }
L_78:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,2097152
	LD	A,65
	CALL	__fcmp
	JP	P,L_79
;  241	
;  242	  buf += i + ndigit + 1; 	
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,(IX+15)
	ADD	HL,BC
	LD	(IX+15),HL
;  243	
;  244	  PSH1(0);
	LD	(HL),0
	LD	IY,(IX+15)
	LEA	IY,IY+-1
	LD	(IX+15),IY
;  245	
;  246	  if(ndigit > 0) {	
	OR	A,A
	LD	BC,(IX+12)
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	JR	NC,L_91
;  247		  t = f2 * scal;
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	LD	BC,(IX+-29)
	LD	A,(IX+-26)
	CALL	__fmul
	LD	(IX+-25),BC
	LD	(IX+-22),A
	OR	A,A
;  248		 z = t + 0.5;
	SBC	HL,HL
	LD	E,63
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-18),BC
	LD	(IX+-15),A
;  249	    for (i = 0;i < ndigit;i++)
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_86
L_84:
;  250	    {
;  251	      PSH1('0'+ (z % 10));
	LD	BC,(IX+15)
	LD	(IX+-38),BC
	LD	HL,(IX+-18)
	LD	E,(IX+-15)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,HL
	LD	A,C
	ADD	A,48
	LD	HL,(IX+-38)
	LD	(HL),A
	LD	IY,(IX+15)
	LEA	IY,IY+-1
	LD	(IX+15),IY
;  252		   z /= 10;
	LD	HL,(IX+-18)
	LD	E,(IX+-15)
	XOR	A,A
	LD	BC,10
	CALL	__ldivu
	LD	(IX+-18),HL
	LD	(IX+-15),E
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  253	    }
L_86:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_84
;  254	    PSH1('.');
	LD	BC,(IX+15)
	LD	(IX+-41),BC
	LD	HL,BC
	LD	(HL),46
	LD	IY,(IX+15)
	LEA	IY,IY+-1
	LD	(IX+15),IY
;  255	  }
;  256	  else
	JR	L_93
L_91:
;  257	    PSH1(0);
	LD	HL,(IX+15)
	LD	(HL),0
	LD	IY,(IX+15)
	LEA	IY,IY+-1
	LD	(IX+15),IY
;  258	
;  259	  do {
L_93:
;  260	    PSH1('0'+ (k % 10));
	LD	BC,(IX+15)
	LD	(IX+-44),BC
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,HL
	LD	A,C
	ADD	A,48
	LD	HL,(IX+-44)
	LD	(HL),A
	LD	IY,(IX+15)
	LEA	IY,IY+-1
	LD	(IX+15),IY
;  261	    k /= 10;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	XOR	A,A
	LD	BC,10
	CALL	__ldivu
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  262	  }while (k);
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	CALL	__lcmpzero
	JR	NZ,L_93
;  263	
;  264	  if (sign)
	LD	HL,(IX+-21)
	CALL	__icmpzero
	JR	Z,L_99
;  265	    PSH1('-');
	LD	HL,(IX+15)
	LD	(HL),45
L_99:
;  266	  return c;
	LD	HL,(IX+-14)
;  267	}
L_100:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _gcvt ***************************
;Name                         Addr/Register   Size   Type
;f2                                   IX-29      4   variable
;t                                    IX-25      4   variable
;sign                                 IX-21      3   variable
;z                                    IX-18      4   variable
;c                                    IX-14      3   variable
;scal                                 IX-11      4   variable
;k                                     IX-7      4   variable
;i                                     IX-3      3   variable
;buf                                  IX+15      3   parameter
;ndigit                               IX+12      3   parameter
;f                                     IX+6      4   parameter


; Stack Frame Size: 62 (bytes)
;       Spill Code: -2 (instruction)


	XREF _sqrt:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_FontDrawText:ROM
	XREF _os_FontSelect:ROM
	XREF _os_SetCursorPos:ROM
	XREF __idivs:ROM
	XREF __ldivu:ROM
	XREF __lremu:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fneg:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __ultof:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __lcmpzero:ROM
	XREF __ishrs_b:ROM
	XDEF _gcvt
	XDEF _printTextSmall
	XDEF _printText
	XDEF _min
	XDEF _max
	XDEF _floatAbs
	XDEF _fastACos
	XDEF _fastSqrt
	XDEF _fastSin
	XDEF _fastCos
	XDEF _distanceBetween
	XDEF _normalizeVector
	XDEF _rotateVector
	XDEF _root
	END
